Ambiente virtual
Activar VENV
Instalar django
Instalar psycopg2-binary y psycopg2
git init (tipicamente se hace dentro de la carpeta raiz, pero hay casos de uso donde se opta por hacerlo afuera y que contenga la carpeta raíz del proyecto)
django-admin startproject (proyecto)
Renombrar proyecto (carpeta raíz) a src, para recordar 
los niveles.
Crear la app
py manage.py startapp (nombre de app)
Crear repositorio remoto github.
git remote add origin (URL). "origin" es el nombre del repositorio remotamente, pero no necesita llamarse "origin" siempre.
git add . (agregamos la carpeta en la que esoty posicionado, es decir, dentro de src, al github)
git push -u origin main
Las ramas se pueden hacer igualmente por github, no presenta mayor inconveniente.
automaticamente se setea la rama main localmente.
puedo chequear las ramas con git branch -a
agregamos la app en urls.py
creamos la BD, esta  vez directamente en postgres, para ello primero:
asigmanos en settings.py la config de la BD.
Engine sería django.db.backends.postgresql_pysopg2
Ejemplo:
Tutorial postgress+django primera instalacion:
https://stackpython.medium.com/how-to-start-django-project-with-a-database-postgresql-aaa1d74659d8

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'your_database_name', #<- el nombre de la BD que cree en el PGADMIN directamente para este proyecto
        'USER': 'your_username', #<- el nombe de usuario. Integrado viene "postgres", aunque quizá lo renombré a "admin"
        'PASSWORD': 'your_password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

Necesitamos abrir postgres y crear la base de datos de destino, antes de intentar migrar. 
creamos los usuarios admin
inicializamos proyecto
y a trabajar.

--

Crear las redirecciones (recordar, usar principalmente
el urls de las apps, para poder tener así multiples home)
Creamos los modelos para reflejaer las exigencias de nuestro proyecto. 
En templates, \app creamos el bloque html que contendrá por ejemplo las OCs y su estado.
ahi por ejemplo creamos un div clase "post", y luego
<h3>{{post.title}}
     {{post.content}}
{{post.author.username}}
Es importante recordar que makemigrations te pone en memoria los modelos, para que puedan ser sucesivamente migrados a la BD con migrate.
Es importante agregar al admin.py los contenidos que quiero visualizar en la administración y poder manipularlos. Ej: admin.site.register(Post), from .models import Post (donde post es el nombre de uno de los modelos de ejemplo)

#para cargar imagenes en django, necesito, aparentemente, realizar estas acciones:

#Agregar esto a mi url.py principal del proyecto (no de la app).
#from django.conf import settings #por sugerencia para que carguen las imagenes
#from django.conf.urls.static import static #por sugerencia para que carguen las imagenes
#al final (luego del cierre del corchete de urlpatterns) 
# agregamos "+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)"